properties([
    parameters([
        choice(
              name: '_configfiles_branch',
              description: 'Branch to pull from for "spotprophets.configs"',
              choices: ['ci-do', 'ci-dev', 'ci-test-1', 'ci-stg', 'ci-prod-alpha', 'ci-prod'] 
          ),
          choice(
              name: '_commit_id',
              description: 'Branch to pull from for "netcore.services"',
              choices: ['development', 'test', 'release', 'master']
          ),
          choice(
              name: 'jenkins_scripts_branch',
              description: 'Branch to pull from for "jenkins.scripts"',
              choices: ['ci-do']
          )
    ])
])

pipeline {
    agent { label 'docker-build'}
    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
    }

    stages {
        
        stage ('Get Source netcore.services') {
            steps {
                cleanWs()
                dir('spotprophets.netcore.services'){
                checkout([$class: 'GitSCM', 
                branches: [[name: '$_commit_id']],
                userRemoteConfigs: [[credentialsId: 'jenkins', url: 'git@bitbucket.org:258projects/netcore.services.git']],
                ])
                }
            }
        }
        stage('Get Jenkins Scripts') {
            steps {
                dir('jenkins.scripts'){
                    checkout([$class: 'GitSCM', 
                    branches: [[name: '$jenkins_scripts_branch']],
                    userRemoteConfigs: [[credentialsId: 'jenkins', url: 'git@bitbucket.org:258projects/jenkins.scripts.git']],
                    ])
                    }
            }
        }
        stage('Get Source spotprophets.configs') {
            steps {
                dir('spotprophets.configs'){
                    checkout([$class: 'GitSCM', 
                    branches: [[name: '$_configfiles_branch']],
                    userRemoteConfigs: [[credentialsId: 'jenkins', url: 'git@bitbucket.org:258projects/spotprophets.configs.git']],
                    ])
                    }
            }
        }
        stage('Combine variables & Inject vars') {
            steps {
                sh '''
                source spotprophets.configs/vars.ini
                sh ./jenkins.scripts/PaymentsAPI/PaymentsApiDockerPrepare.sh
                source PaymentsApiDockerProps
                sh ./jenkins.scripts/Prematch/PrematchDockerPrepare.sh
                source PrematchDockerProps
                sh ./jenkins.scripts/EventMenu/EventMenuDockerPrepare.sh
                source EventMenuDockerProps
                sh ./jenkins.scripts/SeasonRankingEvaluation/SeasonRankEvalDockerPrepare.sh
                source SeasonRankEvalDockerProps
                sh ./jenkins.scripts/BetslipEvaluation/BetslipEvaluationDockerPrepare.sh
                source BetslipEvaluationDockerProps
                '''
            }
        }
        stage('Build Docker Images') {
            steps {
                sh '''
                source spotprophets.configs/vars.ini
                source PaymentsApiDockerProps
                source PrematchDockerProps
                source EventMenuDockerProps
                source SeasonRankEvalDockerProps
                source BetslipEvaluationDockerProps

                docker ps
                docker images
                '''
            }
        }



/*       stage('Build Docker Images')
         repo_jenkins.scripts/PaymentsAPI/PaymentsApiDockerBuildAndRun.cmd
         repo_jenkins.scripts/Prematch/PrematchDockerBuildAndRun.cmd
         repo_jenkins.scripts/EventMenu/EventMenuDockerBuildAndRun.cmd
         repo_jenkins.scripts/SeasonRankingEvaluation/SeasonRankEvalDockerBuildAndRun.cmd
         repo_jenkins.scripts/BetslipEvaluation/BetslipEvaluationBuildAndRun.cmd
         repo_jenkins.scripts\PaymentsAPI\PaymentsApiWarmup.cmd */

    }
}
